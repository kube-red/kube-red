(function () {
    'use strict';

    const defaultClusterConfig = {
        incluster: true,
        server: "https://api.server:8443",
        user: "cluster-admin",
        password: "",
    };
    const Controller$3 = {
        name: "cluster-config",
        defaults: defaultClusterConfig,
    };

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            config: { value: Controller$3.defaults },
        },
        inputs: 0,
        outputs: 0,
        icon: "file.png",
        oneditsave: oneditsave,
        oneditprepare: oneditprepare,
        label: function () {
            return this.name || Controller$3.name;
        }
    };
    function oneditsave() {
        this.config = Controller$3.defaults;
        this.name = $("#node-input-name").val();
        this.config.server = $("#node-input-server").val();
        this.config.incluster = $("#node-input-incluster").is(":checked");
        this.config.user = $("#node-input-user").val();
        this.config.password = $("#node-input-password").val();
    }
    function oneditprepare() {
        // Add hooks to disable form fields when incluster is checked
        var container = $("#node-input-incluster");
        container.on('change', function () {
            $("#node-input-server").prop("disabled", container.is(":checked"));
            $("#node-input-user").prop("disabled", container.is(":checked"));
            $("#node-input-password").prop("disabled", container.is(":checked"));
        });
        // restore form values
        $("#node-input-name").val(this.name);
        $("#node-input-incluster").prop("checked", this.config.incluster);
        $("#node-input-server").val(this.config.server);
        $("#node-input-user").val(this.config.user);
        $("#node-input-password").val(this.config.password);
        // On restore disable if needed
        $("#node-input-server").prop("disabled", this.config.incluster);
        $("#node-input-user").prop("disabled", this.config.incluster);
        $("#node-input-password").prop("disabled", this.config.incluster);
    }

    // TODO: Watch is not implemented yet
    const actions$1 = ["create", "delete", "list", "get", "update", "patch"];
    const Controller$2 = {
        name: "namespace",
        actions: actions$1,
    };

    const NamespaceEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            name: { value: "" },
            cluster: { value: "", type: Controller$3.name, required: true },
            action: { value: "-" },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.name || Controller$2.name;
        },
        oneditprepare: function () {
            // Example how to add a new row on action selection using switch
            // select action and show/hide the appropriate form
            // function selectAction(ev: Event) {
            //  var t = ev.target as HTMLSelectElement; // convert to basic element
            //
            //  var container = $('#node-input-action-configuration')
            //     container.empty();
            //  var row1 = $('<div/>').appendTo(container);
            //  ('<label/>',{for:"node-input-create",style:"width:110px; margin-right:10px;"}).text("Create").appendTo(row1);
            //  ('<input/>',{style:"width:250px",class:"node-input-create",type:"text"})
            //   .appendTo(row1)
            //   .typedInput({types:['global']});
            // }
            // Action config container
            var container = $('#node-input-config-container');
            var row1 = $('<div/>').appendTo(container);
            $('<label/>', { for: "node-input-action", style: "width:110px; margin-right:10px;" }).text("Action").appendTo(row1);
            var propertyAction = $('<select/>', { style: "width:250px", class: "node-input-action",
                // Add event listener to render the correct fields
                onchange: function (ev) {
                    // event listener for example above
                    // addEventListener('change', selectAction);
                } })
                .appendTo(row1);
            Controller$2.actions.forEach(action => {
                propertyAction.append($('<option>', {
                    value: action,
                    text: action,
                })).appendTo(row1);
            });
            propertyAction.val(this.action);
        },
        oneditsave: function () {
            // Find client source details
            var property = $("#node-input-config-container");
            var node = this;
            node.action = property.find(".node-input-action :selected").text();
        },
    };

    // TODO: Watch is not implemented yet
    const actions = ["create", "delete", "list", "get", "update", "patch"];
    const Controller$1 = {
        name: "configmap",
        actions: actions,
    };

    const ConfigMapEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            name: { value: "" },
            namespace: { value: "" },
            cluster: { value: "", type: Controller$3.name, required: true },
            action: { value: "-" },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.name || Controller$1.name;
        },
        oneditprepare: function () {
            // Action config container
            var container = $('#node-input-config-container');
            var row1 = $('<div/>').appendTo(container);
            var row2 = $('<div/>', { style: "margin-top:8px;" }).appendTo(container);
            $('<label/>', { for: "node-input-action", style: "width:110px; margin-right:10px;" }).text("Action").appendTo(row1);
            var propertyAction = $('<select/>', { style: "width:250px", class: "node-input-action" })
                .appendTo(row1);
            Controller$1.actions.forEach(action => {
                propertyAction.append($('<option>', {
                    value: action,
                    text: action,
                })).appendTo(row1);
            });
            $('<label/>', { for: "node-input-namespace", style: "width:110px; margin-right:10px;" }).text("Namespace").appendTo(row2);
            var propertyNamespace = $('<input/>', { style: "width:250px", class: "node-input-namespace", type: "text" })
                .appendTo(row2)
                .typedInput({ types: ['str'] });
            propertyNamespace.typedInput('value', this.namespace);
            propertyAction.val(this.action);
        },
        oneditsave: function () {
            // Find client source details
            var property = $("#node-input-config-container");
            var node = this;
            node.action = property.find(".node-input-action :selected").text();
            node.namespace = property.find(".node-input-namespace").typedInput('value');
        },
    };

    const Controller = {
        name: "upsert",
    };

    const UpsertEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            name: { value: "" },
            cluster: { value: "", type: Controller$3.name, required: true },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.name || Controller.name;
        },
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("upsert", UpsertEditor);
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);
    RED.nodes.registerType("namespace", NamespaceEditor);
    RED.nodes.registerType("configmap", ConfigMapEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,