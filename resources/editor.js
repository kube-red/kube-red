(function () {
    'use strict';

    const defaultClusterConfig = {
        incluster: true,
        server: "https://api.server:8443",
        user: "cluster-admin",
        password: "",
    };
    const Controller = {
        name: "cluster-config",
        defaults: defaultClusterConfig,
    };

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            config: { value: Controller.defaults },
        },
        inputs: 0,
        outputs: 0,
        icon: "file.png",
        oneditsave: Save,
        oneditprepare: Restore,
        label: function () {
            return this.name || Controller.name;
        }
    };
    function Save() {
        this.config = Controller.defaults;
        this.name = $("#node-input-name").val();
        this.config.incluster = $("#node-input-incluster").is(":checked");
        this.config.server = $("#node-input-server").val();
        this.config.user = $("#node-input-user").val();
        this.config.password = $("#node-input-password").val();
    }
    function Restore() {
        $("#node-input-name").val(this.name);
        $("#node-input-incluster").prop("checked", this.config.incluster);
        $("#node-input-server").val(this.config.server);
        $("#node-input-user").val(this.config.user);
        $("#node-input-password").val(this.config.password);
    }

    const LowerCaseEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            cluster: { value: "", type: "cluster-config" },
            prefix: { value: "" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "lower-case";
        }
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("lower-case", LowerCaseEditor);
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlcyI6WyJzcmMvY2x1c3Rlci1jb25maWcvdHlwZXMudHMiLCJzcmMvY2x1c3Rlci1jb25maWcvZWRpdG9yLnRzIiwic3JjL2xvd2VyLWNhc2UvZWRpdG9yLnRzIiwic3JjL2VkaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJDb25maWcge1xuICAgIGluY2x1c3RlcjogYm9vbGVhbjtcbiAgICBzZXJ2ZXI6IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxuY29uc3QgZGVmYXVsdENsdXN0ZXJDb25maWc6IENsdXN0ZXJDb25maWcgPSB7XG4gICAgaW5jbHVzdGVyOiB0cnVlLFxuICAgIHNlcnZlcjogXCJodHRwczovL2FwaS5zZXJ2ZXI6ODQ0M1wiLFxuICAgIHVzZXI6IFwiY2x1c3Rlci1hZG1pblwiLFxuICAgIHBhc3N3b3JkOiBcIlwiLFxufVxuXG5leHBvcnQgY29uc3QgQ29udHJvbGxlciA9IHtcbiAgICBuYW1lOiBcImNsdXN0ZXItY29uZmlnXCIsXG4gICAgZGVmYXVsdHM6IGRlZmF1bHRDbHVzdGVyQ29uZmlnLFxufVxuXG5leHBvcnQgZGVmYXVsdCBDbHVzdGVyQ29uZmlnO1xuXG4iLCJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcbmltcG9ydCB7IENvbnRyb2xsZXIsIENsdXN0ZXJDb25maWcgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJDb25maWdFZGl0b3JQcm9wZXJ0aWVzIGV4dGVuZHMgRWRpdG9yTm9kZVByb3BlcnRpZXMge1xuICAgIGNvbmZpZzogQ2x1c3RlckNvbmZpZztcbn1cblxuY29uc3QgQ2x1c3RlckNvbmZpZ0VkaXRvcjogRWRpdG9yTm9kZURlZjxDbHVzdGVyQ29uZmlnRWRpdG9yUHJvcGVydGllcz4gPSB7XG4gICAgY2F0ZWdvcnk6ICdjb25maWcnLFxuICAgIGNvbG9yOiAnI2E2YmJjZicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgbmFtZToge3ZhbHVlOlwiXCJ9LFxuICAgICAgICBjb25maWc6IHt2YWx1ZTogQ29udHJvbGxlci5kZWZhdWx0c30sXG4gICAgfSxcbiAgICBpbnB1dHM6MCxcbiAgICBvdXRwdXRzOjAsXG4gICAgaWNvbjogXCJmaWxlLnBuZ1wiLFxuICAgIG9uZWRpdHNhdmU6IFNhdmUsXG4gICAgb25lZGl0cHJlcGFyZTogUmVzdG9yZSxcbiAgICBsYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWV8fENvbnRyb2xsZXIubmFtZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENsdXN0ZXJDb25maWdFZGl0b3I7XG5cbmZ1bmN0aW9uIFNhdmUoKSB7XG4gICAgdGhpcy5jb25maWcgPSBDb250cm9sbGVyLmRlZmF1bHRzO1xuXG4gICAgdGhpcy5uYW1lID0gJChcIiNub2RlLWlucHV0LW5hbWVcIikudmFsKClcbiAgICB0aGlzLmNvbmZpZy5pbmNsdXN0ZXIgPSAkKFwiI25vZGUtaW5wdXQtaW5jbHVzdGVyXCIpLmlzKFwiOmNoZWNrZWRcIik7XG4gICAgdGhpcy5jb25maWcuc2VydmVyID0gJChcIiNub2RlLWlucHV0LXNlcnZlclwiKS52YWwoKTtcbiAgICB0aGlzLmNvbmZpZy51c2VyID0gJChcIiNub2RlLWlucHV0LXVzZXJcIikudmFsKCk7XG4gICAgdGhpcy5jb25maWcucGFzc3dvcmQgPSAkKFwiI25vZGUtaW5wdXQtcGFzc3dvcmRcIikudmFsKCk7XG59XG5cbmZ1bmN0aW9uIFJlc3RvcmUoKSB7XG4gICAgJChcIiNub2RlLWlucHV0LW5hbWVcIikudmFsKHRoaXMubmFtZSlcbiAgICAkKFwiI25vZGUtaW5wdXQtaW5jbHVzdGVyXCIpLnByb3AoXCJjaGVja2VkXCIsIHRoaXMuY29uZmlnLmluY2x1c3Rlcik7XG4gICAgJChcIiNub2RlLWlucHV0LXNlcnZlclwiKS52YWwodGhpcy5jb25maWcuc2VydmVyKTtcbiAgICAkKFwiI25vZGUtaW5wdXQtdXNlclwiKS52YWwodGhpcy5jb25maWcudXNlcik7XG4gICAgJChcIiNub2RlLWlucHV0LXBhc3N3b3JkXCIpLnZhbCh0aGlzLmNvbmZpZy5wYXNzd29yZCk7XG59XG4iLCJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcblxuZXhwb3J0IGludGVyZmFjZSBMb3dlckNhc2VFZGl0b3JQcm9wZXJ0aWVzIGV4dGVuZHMgRWRpdG9yTm9kZVByb3BlcnRpZXMge1xuICAgIHByZWZpeDogc3RyaW5nO1xuICAgIGNsdXN0ZXI6IHN0cmluZztcbn1cblxuY29uc3QgTG93ZXJDYXNlRWRpdG9yOiBFZGl0b3JOb2RlRGVmPExvd2VyQ2FzZUVkaXRvclByb3BlcnRpZXM+ID0ge1xuICAgIGNhdGVnb3J5OiAnZnVuY3Rpb24nLFxuICAgIGNvbG9yOiAnI2E2YmJjZicsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgbmFtZToge3ZhbHVlOlwiXCJ9LFxuICAgICAgICBjbHVzdGVyOiB7dmFsdWU6IFwiXCIsIHR5cGU6IFwiY2x1c3Rlci1jb25maWdcIn0sXG4gICAgICAgIHByZWZpeDoge3ZhbHVlOiBcIlwifVxuICAgIH0sXG4gICAgaW5wdXRzOjEsXG4gICAgb3V0cHV0czoxLFxuICAgIGljb246IFwiZmlsZS5wbmdcIixcbiAgICBsYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWV8fFwibG93ZXItY2FzZVwiO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG93ZXJDYXNlRWRpdG9yO1xuIiwiaW1wb3J0IHsgRWRpdG9yUkVEIH0gZnJvbSBcIm5vZGUtcmVkXCI7XG5pbXBvcnQgQ2x1c3RlckNvbmZpZ0VkaXRvciBmcm9tIFwiLi9jbHVzdGVyLWNvbmZpZy9lZGl0b3JcIjtcbmltcG9ydCBMb3dlckNhc2VFZGl0b3IgZnJvbSBcIi4vbG93ZXItY2FzZS9lZGl0b3JcIjtcblxuZGVjbGFyZSBjb25zdCBSRUQ6IEVkaXRvclJFRDtcblxuLy8gZmV0Y2ggZGlzY292ZXJlZCB0eXBlcyBmcm9tIHRoZSBiYWNrZW5kLFxuLy8gYW5kIGZvciBlYWNoIHR5cGUsIHJlZ2lzdGVyIGEga3ViZSBub2RlIChpLmUuIGRlcGxveW1lbnQsIG5vZGVzLCBwb2RzLCBldGMuIGV0Yy4gaW5jbHVkaW5nIENSRHMpXG4vLyBpbiBub2RlLXJlZFxuXG4vLyBmb3IgdHlwZSA6PSByYW5nZSBkaXNjb3ZlcmVkVHlwZXMge1xuLy8gICAgIFJFRC5ub2Rlcy5yZWdpc3RlclR5cGUoXCJwb2RzXCIsIFBvZHNFZGl0b3IpO1xuLy8gfVxuXG5SRUQubm9kZXMucmVnaXN0ZXJUeXBlKFwibG93ZXItY2FzZVwiLCBMb3dlckNhc2VFZGl0b3IpO1xuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcImNsdXN0ZXItY29uZmlnXCIsIENsdXN0ZXJDb25maWdFZGl0b3IpXG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0lBT0EsTUFBTSxvQkFBb0IsR0FBa0I7SUFDeEMsSUFBQSxTQUFTLEVBQUUsSUFBSTtJQUNmLElBQUEsTUFBTSxFQUFFLHlCQUF5QjtJQUNqQyxJQUFBLElBQUksRUFBRSxlQUFlO0lBQ3JCLElBQUEsUUFBUSxFQUFFLEVBQUU7S0FDZixDQUFBO0lBRU0sTUFBTSxVQUFVLEdBQUc7SUFDdEIsSUFBQSxJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLElBQUEsUUFBUSxFQUFFLG9CQUFvQjtLQUNqQzs7SUNWRCxNQUFNLG1CQUFtQixHQUFpRDtJQUN0RSxJQUFBLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7SUFDTixRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUM7SUFDaEIsUUFBQSxNQUFNLEVBQUUsRUFBQyxLQUFLLEVB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