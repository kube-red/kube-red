(function () {
    'use strict';

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcc',
        defaults: {
            incluster: { value: false },
            name: { value: "" },
            server: { value: "" },
            user: { value: "" },
            password: { value: "" },
        },
        inputs: 0,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "cluster-config";
        }
    };

    const LowerCaseEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            prefix: { value: "" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "lower-case";
        }
    };

    const NamespaceEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            cluster: { type: "cluster-config", value: "" },
            name: { value: "" },
            namespacename: { value: "default" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "namespace";
        }
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);
    RED.nodes.registerType("lower-case", LowerCaseEditor);
    RED.nodes.registerType("namespace", NamespaceEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlcyI6WyJzcmMvY2x1c3Rlci1jb25maWcvZWRpdG9yLnRzIiwic3JjL2xvd2VyLWNhc2UvZWRpdG9yLnRzIiwic3JjL25hbWVzcGFjZS9lZGl0b3IudHMiLCJzcmMvZWRpdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVkaXRvck5vZGVEZWYsIEVkaXRvck5vZGVQcm9wZXJ0aWVzIH0gZnJvbSAnbm9kZS1yZWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIENsdXN0ZXJDb25maWdFZGl0b3JQcm9wZXJ0aWVzIGV4dGVuZHMgRWRpdG9yTm9kZVByb3BlcnRpZXMge1xuICAgIGluY2x1c3RlcjogYm9vbGVhbjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgc2VydmVyOiBzdHJpbmc7XG4gICAgdXNlcjogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG59XG5cbmNvbnN0IENsdXN0ZXJDb25maWdFZGl0b3I6IEVkaXRvck5vZGVEZWY8Q2x1c3RlckNvbmZpZ0VkaXRvclByb3BlcnRpZXM+ID0ge1xuICAgIGNhdGVnb3J5OiAnY29uZmlnJyxcbiAgICBjb2xvcjogJyNhNmJiY2MnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGluY2x1c3Rlcjoge3ZhbHVlOiBmYWxzZX0sXG4gICAgICAgIG5hbWU6IHt2YWx1ZTogXCJcIn0sXG4gICAgICAgIHNlcnZlcjoge3ZhbHVlOiBcIlwifSxcbiAgICAgICAgdXNlcjoge3ZhbHVlOiBcIlwifSxcbiAgICAgICAgcGFzc3dvcmQ6IHt2YWx1ZTogXCJcIn0sXG4gICAgfSxcbiAgICBpbnB1dHM6MCxcbiAgICBvdXRwdXRzOjEsXG4gICAgaWNvbjogXCJmaWxlLnBuZ1wiLFxuICAgIGxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXx8XCJjbHVzdGVyLWNvbmZpZ1wiO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2x1c3RlckNvbmZpZ0VkaXRvcjtcbiIsImltcG9ydCB7IEVkaXRvck5vZGVEZWYsIEVkaXRvck5vZGVQcm9wZXJ0aWVzIH0gZnJvbSAnbm9kZS1yZWQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvd2VyQ2FzZUVkaXRvclByb3BlcnRpZXMgZXh0ZW5kcyBFZGl0b3JOb2RlUHJvcGVydGllcyB7XG4gICAgcHJlZml4OiBzdHJpbmc7XG59XG5cbmNvbnN0IExvd2VyQ2FzZUVkaXRvcjogRWRpdG9yTm9kZURlZjxMb3dlckNhc2VFZGl0b3JQcm9wZXJ0aWVzPiA9IHtcbiAgICBjYXRlZ29yeTogJ2Z1bmN0aW9uJyxcbiAgICBjb2xvcjogJyNhNmJiY2YnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIG5hbWU6IHt2YWx1ZTpcIlwifSxcbiAgICAgICAgcHJlZml4OiB7dmFsdWU6IFwiXCJ9XG4gICAgfSxcbiAgICBpbnB1dHM6MSxcbiAgICBvdXRwdXRzOjEsXG4gICAgaWNvbjogXCJmaWxlLnBuZ1wiLFxuICAgIGxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXx8XCJsb3dlci1jYXNlXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMb3dlckNhc2VFZGl0b3I7XG4iLCJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcbmltcG9ydCB7IENsdXN0ZXJDb25maWdQcm9wZXJ0aWVzIH0gZnJvbSAnLi4vY2x1c3Rlci1jb25maWcvY29udHJvbGxlcic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZXNwYWNlRWRpdG9yUHJvcGVydGllcyBleHRlbmRzIEVkaXRvck5vZGVQcm9wZXJ0aWVzIHtcbiAgICBuYW1lc3BhY2VuYW1lOiBzdHJpbmc7XG4gICAgY2x1c3RlcjogQ2x1c3RlckNvbmZpZ1Byb3BlcnRpZXM7XG59XG5cbmNvbnN0IE5hbWVzcGFjZUVkaXRvcjogRWRpdG9yTm9kZURlZjxOYW1lc3BhY2VFZGl0b3JQcm9wZXJ0aWVzPiA9IHtcbiAgICBjYXRlZ29yeTogJ2Z1bmN0aW9uJyxcbiAgICBjb2xvcjogJyNhNmJiY2YnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGNsdXN0ZXI6IHt0eXBlOiBcImNsdXN0ZXItY29uZmlnXCIsIHZhbHVlOiBcIlwifSxcbiAgICAgICAgbmFtZToge3ZhbHVlOlwiXCJ9LFxuICAgICAgICBuYW1lc3BhY2VuYW1lOiB7dmFsdWU6IFwiZGVmYXVsdFwifVxuICAgIH0sXG4gICAgaW5wdXRzOjEsXG4gICAgb3V0cHV0czoxLFxuICAgIGljb246IFwiZmlsZS5wbmdcIixcbiAgICBsYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWV8fFwibmFtZXNwYWNlXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOYW1lc3BhY2VFZGl0b3I7XG4iLCJpbXBvcnQgeyBFZGl0b3JSRUQgfSBmcm9tIFwibm9kZS1yZWRcIjtcbmltcG9ydCBDbHVzdGVyRWRpdG9yIGZyb20gXCIuL2NsdXN0ZXItY29uZmlnL2VkaXRvclwiO1xuaW1wb3J0IExvd2VyQ2FzZUVkaXRvciBmcm9tIFwiLi9sb3dlci1jYXNlL2VkaXRvclwiO1xuaW1wb3J0IE5hbWVzcGFjZUVkaXRvciBmcm9tIFwiLi9uYW1lc3BhY2UvZWRpdG9yXCI7XG5cbmRlY2xhcmUgY29uc3QgUkVEOiBFZGl0b3JSRUQ7XG5cbi8vIGZldGNoIGRpc2NvdmVyZWQgdHlwZXMgZnJvbSB0aGUgYmFja2VuZCxcbi8vIGFuZCBmb3IgZWFjaCB0eXBlLCByZWdpc3RlciBhIGt1YmUgbm9kZSAoaS5lLiBkZXBsb3ltZW50LCBub2RlcywgcG9kcywgZXRjLiBldGMuIGluY2x1ZGluZyBDUkRzKVxuLy8gaW4gbm9kZS1yZWRcblxuLy8gZm9yIHR5cGUgOj0gcmFuZ2UgZGlzY292ZXJlZFR5cGVzIHtcbi8vICAgICBSRUQubm9kZXMucmVnaXN0ZXJUeXBlKFwicG9kc1wiLCBQb2RzRWRpdG9yKTtcbi8vIH1cblxuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcImNsdXN0ZXItY29uZmlnXCIsIENsdXN0ZXJFZGl0b3IpO1xuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcImxvd2VyLWNhc2VcIiwgTG93ZXJDYXNlRWRpdG9yKTtcblJFRC5ub2Rlcy5yZWdpc3RlclR5cGUoXCJuYW1lc3BhY2VcIiwgTmFtZXNwYWNlRWRpdG9yKTtcbiJdLCJuYW1lcyI6WyJDbHVzdGVyRWRpdG9yIl0sIm1hcHBpbmdzIjoiOzs7SUFVQSxNQUFNLG1CQUFtQixHQUFpRDtJQUN0RSxJQUFBLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7SUFDTixRQUFBLFNBQVMsRUFBRSxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUM7SUFDekIsUUFBQSxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQ2pCLFFBQUEsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUNuQixRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDakIsUUFBQSxRQUFRLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQ3hCLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLGdCQUFnQixDQUFDO1NBQ3RDO0tBQ0o7O0lDcEJELE1BQU0sZUFBZSxHQUE2QztJQUM5RCxJQUFBLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7SUFDTixRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUM7SUFDaEIsUUFBQSxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQ3RCLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLFlBQVksQ0FBQztTQUNsQztLQUNKOztJQ1hELE1BQU0sZUFBZSxHQUE2QztJQUM5RCxJQUFBLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7WUFDTixPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUM1QyxRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBQyxFQUFFLEVBQUM7SUFDaEIsUUFBQSxhQUFhLEVBQUUsRUFBQyxLQUFLLEVBQUUsU0FBUyxFQUFDO0lBQ3BDLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLFdBQVcsQ0FBQztTQUNqQztLQUNKOztJQ2ZEO0lBQ0E7SUFDQTtJQUVBO0lBQ0E7SUFDQTtJQUVBLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFQSxtQkFBYSxDQUFDLENBQUM7SUFDeEQsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3RELEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUM7Ozs7OzsifQ==