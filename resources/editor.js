(function () {
    'use strict';

    const defaultClusterConfig = {
        incluster: true,
        server: "https://api.server:8443",
        user: "cluster-admin",
        password: "",
    };
    const Controller$4 = {
        name: "cluster-config",
        defaults: defaultClusterConfig,
    };

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcf',
        defaults: {
            nodename: { value: "" },
            config: { value: Controller$4.defaults },
        },
        inputs: 0,
        outputs: 0,
        icon: "file.png",
        oneditsave: oneditsave,
        oneditprepare: oneditprepare,
        label: function () {
            return this.nodename || Controller$4.name;
        }
    };
    function oneditsave() {
        this.config = Controller$4.defaults;
        this.nodename = $("#node-input-nodename").val();
        this.config.server = $("#node-input-server").val();
        this.config.incluster = $("#node-input-incluster").is(":checked");
        this.config.user = $("#node-input-user").val();
        this.config.password = $("#node-input-password").val();
    }
    function oneditprepare() {
        // Add hooks to disable form fields when incluster is checked
        var container = $("#node-input-incluster");
        container.on('change', function () {
            $("#node-input-server").prop("disabled", container.is(":checked"));
            $("#node-input-user").prop("disabled", container.is(":checked"));
            $("#node-input-password").prop("disabled", container.is(":checked"));
        });
        // restore form values
        $("#node-input-nodename").val(this.nodename);
        $("#node-input-incluster").prop("checked", this.config.incluster);
        $("#node-input-server").val(this.config.server);
        $("#node-input-user").val(this.config.user);
        $("#node-input-password").val(this.config.password);
        // On restore disable if needed
        $("#node-input-server").prop("disabled", this.config.incluster);
        $("#node-input-user").prop("disabled", this.config.incluster);
        $("#node-input-password").prop("disabled", this.config.incluster);
    }

    const Controller$3 = {
        name: "upsert",
    };

    const UpsertEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            nodename: { value: "" },
            cluster: { value: "", type: Controller$4.name, required: true },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.nodename || Controller$3.name;
        },
    };

    const Controller$2 = {
        name: "get",
    };

    const GetEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            nodename: { value: "" },
            cluster: { value: "", type: Controller$4.name, required: true },
            apiversion: { value: "" },
            kind: { value: "" },
            namespace: { value: "" },
            name: { value: "" },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.nodename || Controller$2.name;
        },
    };

    const Controller$1 = {
        name: "delete",
    };

    const DeleteEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            nodename: { value: "" },
            cluster: { value: "", type: Controller$4.name, required: true },
            apiversion: { value: "" },
            kind: { value: "" },
            namespace: { value: "" },
            name: { value: "" },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.nodename || Controller$1.name;
        },
    };

    const Controller = {
        name: "list",
    };

    const ListEditor = {
        category: 'kubernetes',
        color: "#326DE6",
        icon: "kubernetes_logo_40x60_white.png",
        align: "left",
        defaults: {
            nodename: { value: "" },
            cluster: { value: "", type: Controller$4.name, required: true },
            apiversion: { value: "" },
            kind: { value: "" },
            namespace: { value: "" },
            name: { value: "" },
        },
        inputs: 1,
        outputs: 1,
        label: function () {
            return this.nodename || Controller.name;
        },
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType(Controller$4.name, ClusterConfigEditor);
    RED.nodes.registerType(Controller$3.name, UpsertEditor);
    RED.nodes.registerType(Controller$2.name, GetEditor);
    RED.nodes.registerType(Controller$1.name, DeleteEditor);
    RED.nodes.registerType(Controller.name, ListEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,