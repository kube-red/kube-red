(function () {
    'use strict';

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            clusterName: { value: "" },
        },
        inputs: 0,
        outputs: 0,
        icon: "file.png",
        oneditsave: Save,
        oneditprepare: Restore,
        label: function () {
            return this.name || "cluster-config";
        }
    };
    function Save() {
        var property = $("#node-input-name");
        this.name = property.val();
        var property = $("#node-input-cluster-name");
        this.clusterName = property.val();
    }
    function Restore() {
        var property = $("#node-input-name");
        property.val(this.name);
        var property = $("#node-input-cluster-name");
        property.val(this.clusterName);
    }

    const LowerCaseEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            cluster: { value: "", type: "cluster-config" },
            prefix: { value: "" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "lower-case";
        }
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("lower-case", LowerCaseEditor);
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlcyI6WyJzcmMvY2x1c3Rlci1jb25maWcvZWRpdG9yLnRzIiwic3JjL2xvd2VyLWNhc2UvZWRpdG9yLnRzIiwic3JjL2VkaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcblxuZXhwb3J0IGludGVyZmFjZSBDbHVzdGVyQ29uZmlnRWRpdG9yUHJvcGVydGllcyBleHRlbmRzIEVkaXRvck5vZGVQcm9wZXJ0aWVzIHtcbiAgICBjbHVzdGVyTmFtZTogc3RyaW5nO1xufVxuXG5jb25zdCBDbHVzdGVyQ29uZmlnRWRpdG9yOiBFZGl0b3JOb2RlRGVmPENsdXN0ZXJDb25maWdFZGl0b3JQcm9wZXJ0aWVzPiA9IHtcbiAgICBjYXRlZ29yeTogJ2NvbmZpZycsXG4gICAgY29sb3I6ICcjYTZiYmNmJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBuYW1lOiB7dmFsdWU6XCJcIn0sXG4gICAgICAgIGNsdXN0ZXJOYW1lOiB7dmFsdWU6IFwiXCJ9LFxuICAgIH0sXG4gICAgaW5wdXRzOjAsXG4gICAgb3V0cHV0czowLFxuICAgIGljb246IFwiZmlsZS5wbmdcIixcbiAgICBvbmVkaXRzYXZlOiBTYXZlLFxuICAgIG9uZWRpdHByZXBhcmU6IFJlc3RvcmUsXG4gICAgbGFiZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lfHxcImNsdXN0ZXItY29uZmlnXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbHVzdGVyQ29uZmlnRWRpdG9yO1xuXG5mdW5jdGlvbiBTYXZlKCkge1xuICAgIHZhciBwcm9wZXJ0eSA9ICQoXCIjbm9kZS1pbnB1dC1uYW1lXCIpXG4gICAgdGhpcy5uYW1lID0gcHJvcGVydHkudmFsKCk7XG5cbiAgICB2YXIgcHJvcGVydHkgPSAkKFwiI25vZGUtaW5wdXQtY2x1c3Rlci1uYW1lXCIpXG4gICAgdGhpcy5jbHVzdGVyTmFtZSA9IHByb3BlcnR5LnZhbCgpO1xufVxuXG5mdW5jdGlvbiBSZXN0b3JlKCkge1xuICAgIHZhciBwcm9wZXJ0eSA9ICQoXCIjbm9kZS1pbnB1dC1uYW1lXCIpXG4gICAgcHJvcGVydHkudmFsKHRoaXMubmFtZSk7XG5cbiAgICB2YXIgcHJvcGVydHkgPSAkKFwiI25vZGUtaW5wdXQtY2x1c3Rlci1uYW1lXCIpXG4gICAgcHJvcGVydHkudmFsKHRoaXMuY2x1c3Rlck5hbWUpO1xufVxuIiwiaW1wb3J0IHsgRWRpdG9yTm9kZURlZiwgRWRpdG9yTm9kZVByb3BlcnRpZXMgfSBmcm9tICdub2RlLXJlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTG93ZXJDYXNlRWRpdG9yUHJvcGVydGllcyBleHRlbmRzIEVkaXRvck5vZGVQcm9wZXJ0aWVzIHtcbiAgICBwcmVmaXg6IHN0cmluZztcbiAgICBjbHVzdGVyOiBzdHJpbmc7XG59XG5cbmNvbnN0IExvd2VyQ2FzZUVkaXRvcjogRWRpdG9yTm9kZURlZjxMb3dlckNhc2VFZGl0b3JQcm9wZXJ0aWVzPiA9IHtcbiAgICBjYXRlZ29yeTogJ2Z1bmN0aW9uJyxcbiAgICBjb2xvcjogJyNhNmJiY2YnLFxuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIG5hbWU6IHt2YWx1ZTpcIlwifSxcbiAgICAgICAgY2x1c3Rlcjoge3ZhbHVlOiBcIlwiLCB0eXBlOiBcImNsdXN0ZXItY29uZmlnXCJ9LFxuICAgICAgICBwcmVmaXg6IHt2YWx1ZTogXCJcIn1cbiAgICB9LFxuICAgIGlucHV0czoxLFxuICAgIG91dHB1dHM6MSxcbiAgICBpY29uOiBcImZpbGUucG5nXCIsXG4gICAgbGFiZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lfHxcImxvd2VyLWNhc2VcIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvd2VyQ2FzZUVkaXRvcjtcbiIsImltcG9ydCB7IEVkaXRvclJFRCB9IGZyb20gXCJub2RlLXJlZFwiO1xuaW1wb3J0IENsdXN0ZXJDb25maWdFZGl0b3IgZnJvbSBcIi4vY2x1c3Rlci1jb25maWcvZWRpdG9yXCI7XG5pbXBvcnQgTG93ZXJDYXNlRWRpdG9yIGZyb20gXCIuL2xvd2VyLWNhc2UvZWRpdG9yXCI7XG5cbmRlY2xhcmUgY29uc3QgUkVEOiBFZGl0b3JSRUQ7XG5cbi8vIGZldGNoIGRpc2NvdmVyZWQgdHlwZXMgZnJvbSB0aGUgYmFja2VuZCxcbi8vIGFuZCBmb3IgZWFjaCB0eXBlLCByZWdpc3RlciBhIGt1YmUgbm9kZSAoaS5lLiBkZXBsb3ltZW50LCBub2RlcywgcG9kcywgZXRjLiBldGMuIGluY2x1ZGluZyBDUkRzKVxuLy8gaW4gbm9kZS1yZWRcblxuLy8gZm9yIHR5cGUgOj0gcmFuZ2UgZGlzY292ZXJlZFR5cGVzIHtcbi8vICAgICBSRUQubm9kZXMucmVnaXN0ZXJUeXBlKFwicG9kc1wiLCBQb2RzRWRpdG9yKTtcbi8vIH1cblxuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcImxvd2VyLWNhc2VcIiwgTG93ZXJDYXNlRWRpdG9yKTtcblJFRC5ub2Rlcy5yZWdpc3RlclR5cGUoXCJjbHVzdGVyLWNvbmZpZ1wiLCBDbHVzdGVyQ29uZmlnRWRpdG9yKVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztJQU1BLE1BQU0sbUJBQW1CLEdBQWlEO0lBQ3RFLElBQUEsUUFBUSxFQUFFLFFBQVE7SUFDbEIsSUFBQSxLQUFLLEVBQUUsU0FBUztJQUNoQixJQUFBLFFBQVEsRUFBRTtJQUNOLFFBQUEsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQztJQUNoQixRQUFBLFdBQVcsRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDM0IsS0FBQTtJQUNELElBQUEsTUFBTSxFQUFDLENBQUM7SUFDUixJQUFBLE9BQU8sRUFBQyxDQUFDO0lBQ1QsSUFBQSxJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFBLFVBQVUsRUFBRSxJQUFJO0lBQ2hCLElBQUEsYUFBYSxFQUFFLE9BQU87SUFDdEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLGdCQUFnQixDQUFDO1NBQ3RDO0tBQ0osQ0FBQTtJQUlELFNBQVMsSUFBSSxHQUFBO0lBQ1QsSUFBQSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsa0JBQWtCLENBQUMsQ0FBQTtJQUNwQyxJQUFBLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBRTNCLElBQUEsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFDNUMsSUFBQSxJQUFJLENBQUMsV0FBVyxHQUFHLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztJQUN0QyxDQUFDO0lBRUQsU0FBUyxPQUFPLEdBQUE7SUFDWixJQUFBLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0lBQ3BDLElBQUEsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFeEIsSUFBQSxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsMEJBQTBCLENBQUMsQ0FBQTtJQUM1QyxJQUFBLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25DOztJQ2hDQSxNQUFNLGVBQWUsR0FBNkM7SUFDOUQsSUFBQSxRQUFRLEVBQUUsVUFBVTtJQUNwQixJQUFBLEtBQUssRUFBRSxTQUFTO0lBQ2hCLElBQUEsUUFBUSxFQUFFO0lBQ04sUUFBQSxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFDO1lBQ2hCLE9BQU8sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFDO0lBQzVDLFFBQUEsTUFBTSxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUN0QixLQUFBO0lBQ0QsSUFBQSxNQUFNLEVBQUMsQ0FBQztJQUNSLElBQUEsT0FBTyxFQUFDLENBQUM7SUFDVCxJQUFBLElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUEsS0FBSyxFQUFFLFlBQUE7SUFDSCxRQUFBLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBRSxZQUFZLENBQUM7U0FDbEM7S0FDSjs7SUNmRDtJQUNBO0lBQ0E7SUFFQTtJQUNBO0lBQ0E7SUFFQSxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEQsR0FBRyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsbUJBQW1CLENBQUM7Ozs7OzsifQ==