(function () {
    'use strict';

    const LowerCaseEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            name: { value: "" },
            prefix: { value: "" }
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "lower-case";
        }
    };

    const ClusterConfigEditor = {
        category: 'config',
        color: '#a6bbcc',
        defaults: {
            incluster: { value: false },
            name: { value: "" },
            server: { value: "" },
            user: { value: "" },
            password: { value: "" },
        },
        inputs: 0,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "cluster-config";
        }
    };

    const NamespacesEditor = {
        category: 'function',
        color: '#a6bbcf',
        defaults: {
            cluster: { type: "cluster-config", value: "" },
            name: { value: "" },
            labels: { value: [] },
        },
        inputs: 1,
        outputs: 1,
        icon: "file.png",
        label: function () {
            return this.name || "namespace-function";
        }
    };

    // fetch discovered types from the backend,
    // and for each type, register a kube node (i.e. deployment, nodes, pods, etc. etc. including CRDs)
    // in node-red
    // for type := range discoveredTypes {
    //     RED.nodes.registerType("pods", PodsEditor);
    // }
    RED.nodes.registerType("lower-case", LowerCaseEditor);
    RED.nodes.registerType("cluster-config", ClusterConfigEditor);
    RED.nodes.registerType("namespaces", NamespacesEditor);

})();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRpdG9yLmpzIiwic291cmNlcyI6WyJzcmMvbG93ZXItY2FzZS9lZGl0b3IudHMiLCJzcmMvY2x1c3Rlci1jb25maWcvZWRpdG9yLnRzIiwic3JjL25hbWVzcGFjZXMtZnVuY3Rpb24vZWRpdG9yLnRzIiwic3JjL2VkaXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFZGl0b3JOb2RlRGVmLCBFZGl0b3JOb2RlUHJvcGVydGllcyB9IGZyb20gJ25vZGUtcmVkJztcblxuZXhwb3J0IGludGVyZmFjZSBMb3dlckNhc2VFZGl0b3JQcm9wZXJ0aWVzIGV4dGVuZHMgRWRpdG9yTm9kZVByb3BlcnRpZXMge1xuICAgIHByZWZpeDogc3RyaW5nO1xufVxuXG5jb25zdCBMb3dlckNhc2VFZGl0b3I6IEVkaXRvck5vZGVEZWY8TG93ZXJDYXNlRWRpdG9yUHJvcGVydGllcz4gPSB7XG4gICAgY2F0ZWdvcnk6ICdmdW5jdGlvbicsXG4gICAgY29sb3I6ICcjYTZiYmNmJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBuYW1lOiB7dmFsdWU6XCJcIn0sXG4gICAgICAgIHByZWZpeDoge3ZhbHVlOiBcIlwifVxuICAgIH0sXG4gICAgaW5wdXRzOjEsXG4gICAgb3V0cHV0czoxLFxuICAgIGljb246IFwiZmlsZS5wbmdcIixcbiAgICBsYWJlbDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5hbWV8fFwibG93ZXItY2FzZVwiO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTG93ZXJDYXNlRWRpdG9yO1xuIiwiaW1wb3J0IHsgRWRpdG9yTm9kZURlZiwgRWRpdG9yTm9kZVByb3BlcnRpZXMgfSBmcm9tICdub2RlLXJlZCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2x1c3RlckNvbmZpZ0VkaXRvclByb3BlcnRpZXMgZXh0ZW5kcyBFZGl0b3JOb2RlUHJvcGVydGllcyB7XG4gICAgaW5jbHVzdGVyOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBzZXJ2ZXI6IHN0cmluZztcbiAgICB1c2VyOiBzdHJpbmc7XG4gICAgcGFzc3dvcmQ6IHN0cmluZztcbn1cblxuY29uc3QgQ2x1c3RlckNvbmZpZ0VkaXRvcjogRWRpdG9yTm9kZURlZjxDbHVzdGVyQ29uZmlnRWRpdG9yUHJvcGVydGllcz4gPSB7XG4gICAgY2F0ZWdvcnk6ICdjb25maWcnLFxuICAgIGNvbG9yOiAnI2E2YmJjYycsXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgaW5jbHVzdGVyOiB7dmFsdWU6IGZhbHNlfSxcbiAgICAgICAgbmFtZToge3ZhbHVlOiBcIlwifSxcbiAgICAgICAgc2VydmVyOiB7dmFsdWU6IFwiXCJ9LFxuICAgICAgICB1c2VyOiB7dmFsdWU6IFwiXCJ9LFxuICAgICAgICBwYXNzd29yZDoge3ZhbHVlOiBcIlwifSxcbiAgICB9LFxuICAgIGlucHV0czowLFxuICAgIG91dHB1dHM6MSxcbiAgICBpY29uOiBcImZpbGUucG5nXCIsXG4gICAgbGFiZWw6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lfHxcImNsdXN0ZXItY29uZmlnXCI7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDbHVzdGVyQ29uZmlnRWRpdG9yO1xuIiwiaW1wb3J0IHsgRWRpdG9yTm9kZURlZiwgRWRpdG9yTm9kZVByb3BlcnRpZXMgfSBmcm9tICdub2RlLXJlZCc7XG5pbXBvcnQgeyBDbHVzdGVyQ29uZmlnUHJvcGVydGllcyB9IGZyb20gXCIuLi9jbHVzdGVyLWNvbmZpZy9jb250cm9sbGVyXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmFtZXNwYWNlc0VkaXRvclByb3BlcnRpZXMgZXh0ZW5kcyBFZGl0b3JOb2RlUHJvcGVydGllcyB7XG4gICAgY2x1c3RlcjogQ2x1c3RlckNvbmZpZ1Byb3BlcnRpZXM7XG4gICAgbGFiZWxzOiBzdHJpbmdbXTtcbiAgICBuYW1lOiBzdHJpbmc7XG5cbn1cblxuY29uc3QgTmFtZXNwYWNlc0VkaXRvcjogRWRpdG9yTm9kZURlZjxOYW1lc3BhY2VzRWRpdG9yUHJvcGVydGllcz4gPSB7XG4gICAgY2F0ZWdvcnk6ICdmdW5jdGlvbicsXG4gICAgY29sb3I6ICcjYTZiYmNmJyxcbiAgICBkZWZhdWx0czoge1xuICAgICAgICBjbHVzdGVyOiB7dHlwZTogXCJjbHVzdGVyLWNvbmZpZ1wiLCB2YWx1ZTogXCJcIn0sXG4gICAgICAgIG5hbWU6IHt2YWx1ZTogXCJcIn0sXG4gICAgICAgIGxhYmVsczoge3ZhbHVlOiBbXX0sXG4gICAgfSxcbiAgICBpbnB1dHM6MSxcbiAgICBvdXRwdXRzOjEsXG4gICAgaWNvbjogXCJmaWxlLnBuZ1wiLFxuICAgIGxhYmVsOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXx8XCJuYW1lc3BhY2UtZnVuY3Rpb25cIjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hbWVzcGFjZXNFZGl0b3I7XG4iLCJpbXBvcnQgeyBFZGl0b3JSRUQgfSBmcm9tIFwibm9kZS1yZWRcIjtcbmltcG9ydCBMb3dlckNhc2VFZGl0b3IgZnJvbSBcIi4vbG93ZXItY2FzZS9lZGl0b3JcIjtcbmltcG9ydCBDbHVzdGVyRWRpdG9yIGZyb20gXCIuL2NsdXN0ZXItY29uZmlnL2VkaXRvclwiO1xuaW1wb3J0IE5hbWVzcGFjZXNFZGl0b3IgZnJvbSBcIi4vbmFtZXNwYWNlcy1mdW5jdGlvbi9lZGl0b3JcIjtcblxuZGVjbGFyZSBjb25zdCBSRUQ6IEVkaXRvclJFRDtcblxuLy8gZmV0Y2ggZGlzY292ZXJlZCB0eXBlcyBmcm9tIHRoZSBiYWNrZW5kLFxuLy8gYW5kIGZvciBlYWNoIHR5cGUsIHJlZ2lzdGVyIGEga3ViZSBub2RlIChpLmUuIGRlcGxveW1lbnQsIG5vZGVzLCBwb2RzLCBldGMuIGV0Yy4gaW5jbHVkaW5nIENSRHMpXG4vLyBpbiBub2RlLXJlZFxuXG4vLyBmb3IgdHlwZSA6PSByYW5nZSBkaXNjb3ZlcmVkVHlwZXMge1xuLy8gICAgIFJFRC5ub2Rlcy5yZWdpc3RlclR5cGUoXCJwb2RzXCIsIFBvZHNFZGl0b3IpO1xuLy8gfVxuXG5SRUQubm9kZXMucmVnaXN0ZXJUeXBlKFwibG93ZXItY2FzZVwiLCBMb3dlckNhc2VFZGl0b3IpO1xuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcImNsdXN0ZXItY29uZmlnXCIsIENsdXN0ZXJFZGl0b3IpO1xuUkVELm5vZGVzLnJlZ2lzdGVyVHlwZShcIm5hbWVzcGFjZXNcIiwgTmFtZXNwYWNlc0VkaXRvcik7XG4iXSwibmFtZXMiOlsiQ2x1c3RlckVkaXRvciJdLCJtYXBwaW5ncyI6Ijs7O0lBTUEsTUFBTSxlQUFlLEdBQTZDO0lBQzlELElBQUEsUUFBUSxFQUFFLFVBQVU7SUFDcEIsSUFBQSxLQUFLLEVBQUUsU0FBUztJQUNoQixJQUFBLFFBQVEsRUFBRTtJQUNOLFFBQUEsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBQztJQUNoQixRQUFBLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDdEIsS0FBQTtJQUNELElBQUEsTUFBTSxFQUFDLENBQUM7SUFDUixJQUFBLE9BQU8sRUFBQyxDQUFDO0lBQ1QsSUFBQSxJQUFJLEVBQUUsVUFBVTtJQUNoQixJQUFBLEtBQUssRUFBRSxZQUFBO0lBQ0gsUUFBQSxPQUFPLElBQUksQ0FBQyxJQUFJLElBQUUsWUFBWSxDQUFDO1NBQ2xDO0tBQ0o7O0lDVEQsTUFBTSxtQkFBbUIsR0FBaUQ7SUFDdEUsSUFBQSxRQUFRLEVBQUUsUUFBUTtJQUNsQixJQUFBLEtBQUssRUFBRSxTQUFTO0lBQ2hCLElBQUEsUUFBUSxFQUFFO0lBQ04sUUFBQSxTQUFTLEVBQUUsRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFDO0lBQ3pCLFFBQUEsSUFBSSxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUNqQixRQUFBLE1BQU0sRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDbkIsUUFBQSxJQUFJLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQ2pCLFFBQUEsUUFBUSxFQUFFLEVBQUMsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUN4QixLQUFBO0lBQ0QsSUFBQSxNQUFNLEVBQUMsQ0FBQztJQUNSLElBQUEsT0FBTyxFQUFDLENBQUM7SUFDVCxJQUFBLElBQUksRUFBRSxVQUFVO0lBQ2hCLElBQUEsS0FBSyxFQUFFLFlBQUE7SUFDSCxRQUFBLE9BQU8sSUFBSSxDQUFDLElBQUksSUFBRSxnQkFBZ0IsQ0FBQztTQUN0QztLQUNKOztJQ2hCRCxNQUFNLGdCQUFnQixHQUE4QztJQUNoRSxJQUFBLFFBQVEsRUFBRSxVQUFVO0lBQ3BCLElBQUEsS0FBSyxFQUFFLFNBQVM7SUFDaEIsSUFBQSxRQUFRLEVBQUU7WUFDTixPQUFPLEVBQUUsRUFBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBQztJQUM1QyxRQUFBLElBQUksRUFBRSxFQUFDLEtBQUssRUFBRSxFQUFFLEVBQUM7SUFDakIsUUFBQSxNQUFNLEVBQUUsRUFBQyxLQUFLLEVBQUUsRUFBRSxFQUFDO0lBQ3RCLEtBQUE7SUFDRCxJQUFBLE1BQU0sRUFBQyxDQUFDO0lBQ1IsSUFBQSxPQUFPLEVBQUMsQ0FBQztJQUNULElBQUEsSUFBSSxFQUFFLFVBQVU7SUFDaEIsSUFBQSxLQUFLLEVBQUUsWUFBQTtJQUNILFFBQUEsT0FBTyxJQUFJLENBQUMsSUFBSSxJQUFFLG9CQUFvQixDQUFDO1NBQzFDO0tBQ0o7O0lDakJEO0lBQ0E7SUFDQTtJQUVBO0lBQ0E7SUFDQTtJQUVBLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN0RCxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRUEsbUJBQWEsQ0FBQyxDQUFDO0lBQ3hELEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsQ0FBQzs7Ozs7OyJ9